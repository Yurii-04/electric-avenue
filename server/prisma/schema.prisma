generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String   @id @default(cuid())
  firstName      String   @map("first_name")
  lastName       String   @map("last_name")
  email          String   @unique
  hashedPassword String   @map("hashed_password")
  photo          String?
  hashedRt       String?  @map("hashed_rt")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  products Products[]

  @@map("users")
}

model Products {
  id          String   @id @default(cuid())
  sellerId    String   @map("seller_id")
  title       String
  description String
  categoryId  String   @map("category_id")
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  seller            Users               @relation(fields: [sellerId], references: [id])
  category          Categories          @relation(fields: [categoryId], references: [id])
  productAttributes ProductAttributes[]
  productImages     ProductImages[]

  @@map("products")
}

model ProductImages {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  url       String
  publicId  String   @unique @map("public_id")
  createAt  DateTime @default(now()) @map("created_at")

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Categories {
  id       String   @id @default(cuid())
  name     String
  parentId String?  @map("parent_id")
  icon     String?
  isGroup  Boolean? @default(false) @map("is_group")

  products   Products[]
  attributes Attributes[]

  @@index([parentId])
  @@map("categories")
}

// EAV
model Attributes {
  id          String  @id @default(cuid())
  name        String
  description String?
  categoryId  String  @map("category_id")

  attributeOptions  AttributeOptions[]
  category          Categories          @relation(fields: [categoryId], references: [id])
  ProductAttributes ProductAttributes[]

  @@map("attributes")
}

model OptionValues {
  id          String  @id @default(cuid())
  value       String
  description String?

  attributeOptions  AttributeOptions[]
  ProductAttributes ProductAttributes[]

  @@map("option_values")
}

model AttributeOptions {
  id            String @id @default(cuid())
  attributeId   String @map("attribute_id")
  optionValueId String @map("option_value_id")

  attribute   Attributes   @relation(fields: [attributeId], references: [id])
  optionValue OptionValues @relation(fields: [optionValueId], references: [id])

  @@map("attribute_options")
}

model ProductAttributes {
  id            String @id @default(cuid())
  productId     String @map("product_id")
  attributeId   String @map("attribute_id")
  optionValueId String @map("option_value_id")

  product     Products     @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute   Attributes   @relation(fields: [attributeId], references: [id])
  optionValue OptionValues @relation(fields: [optionValueId], references: [id])

  @@unique([productId, attributeId])
  @@map("product_attributes")
}
